<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <title>Movies</title>

  <link rel="stylesheet" href="/stylesheets/movies.css" type="text/css" />

  <script src="/javascripts/dojo/dojo.js" type="text/javascript"
          djConfig="parseOnLoad:true"></script>

  <script type="text/javascript">
    var moviesStore, moviesGrid;
    var peopleStore, peopleGrid;

    dojo.registerModulePath('moviedb', "/javascripts/moviedb");
    dojo.require('moviedb.movies');
    
    dojo.declare('moviedb.MovieForm', dijit.form.Form, {
      movie: null,
      propertiesMap: {
        'movie_title': 'title',
        'movie_release_date': 'releaseDate'
      },
      populate: function(movie) {
        if (movie) {
          for (var prop in this.propertiesMap) {
            dijit.byId(prop).setValue(movie[this.propertiesMap[prop]]);
          }
        } else {
          for (var prop in this.propertiesMap) {
            dijit.byId(prop).setValue(null);
          }
        }
        this._lastChanged = false;
        this._originalState = dojo.formToJson(this.domNode);
        this.movie = movie;
      },
      isChanged: function() {
        if (!this.movie) return false;
        return dojo.formToJson(this.domNode) !== this._originalState;
/*
        for (var prop in this.propertiesMap) {
          if (dijit.byId(prop).getValue() !== this.movie[this.propertiesMap[prop]]) {
console.log("** CHANGED: ", prop, dijit.byId(prop).getValue(), this.movie[this.propertiesMap[prop]]);
            return true;
          }
        }
        return false;
*/
      },
      connectChildren: function() {
        this.inherited(arguments);
        var self = this;
        var conns = this._changeConnections;
        dojo.forEach(this.getDescendants(), function(widget) {
          conns.push(self.connect(widget, 'onChange', 
            dojo.hitch(self, '_checkForChange', widget)))
        });
      },
      _checkForChange: function(widget) {
        if (!this.movie) return;
        var changed = this.isChanged();
        if (changed !== this._lastChanged) {
          if (changed) {
            this.onChange();
          } else {
            this.onRevert();
          }
        }
        this._lastChanged = changed;
      },
      onChange: function() {
        console.log("*** ON CHANGE");
      },
      onRevert: function() {
        console.log("*** ON REVERT");
      }
    });

    function buildMoviesGrid(store) {
      var awardFormatter = function(awards) {
        return awards ? dojo.string.rep('*', awards.length) : '';
      };
      var yearFormatter = function(date) {
        return date ? 1900 + date.getYear() : '';
      };

      var grid = new dojox.grid.DataGrid({
        query: { title: '*' },
        sortInfo: -2,
        store: store,
        structure: [
          { field: "title", name: "Title", width: "auto" },
          { field: "releaseDate", name: "Year", width: "5em", formatter: yearFormatter },
          { field: "awards", name: "Awards", width: "15%", formatter: awardFormatter }
        ],
        selectionMode: 'single',
        rowsPerPage: 50,
        keepRows: 300
      }, 'movieslist');

      moviedb.installTooltips(grid, function(e) {
        if (e.cell.field == "awards") {
          var movie = e.grid.getItem(e.rowIndex);
          if (movie.awards) {
            var msg = "<ul>" + 
              dojo.map(movie.awards, function(award) {
                return "<li>" + award + "</li>";
              }).join('') +
              "</ul>";
            dijit.showTooltip(msg, e.cellNode);
          }
        }
      });
    
      dojo.connect(grid, 'onSelected', function(idx) {
        dojo.publish('movie.selected', [grid.getItem(idx)]);
      });

      return grid;
    }

    function buildPeopleGrid(store) {
      var grid = new dojox.grid.DataGrid({
        query: { name: '*' },
        sortInfo: 1,
        store: store,
        structure: [
          { field: "name", name: "Name", width: "auto" }
        ]
      }, 'peoplelist');
      
      moviedb.installTooltips(grid, function(e) {
        var person = e.grid.getItem(e.rowIndex);
        if (person.dob) {
          var msg = 'born ' + person.dob; //### TODO i18n
          dijit.showTooltip(msg, e.cellNode);
        }
      });
     
      return grid;
    }

    dojo.addOnLoad(function(){
      moviesStore = new moviedb.Store({ target: "/movies", schema: {
        type: 'object',
        properties: {
          title: { type: 'string' },
          releaseDate: { type: 'date', format: 'date-time' }
          //### TODO add awards
        },
        prototype: moviedb.Movie.prototype
      }});
      moviesGrid = buildMoviesGrid(moviesStore);

      peopleStore = new moviedb.Store({ target: "/people" });
      peopleGrid = buildPeopleGrid(peopleStore);

      moviesGrid.startup();
      peopleGrid.startup();

      dojo.subscribe('movie.selected', function(m) {
        console.log("---> ", m); //### REMOVE
        dijit.byId('movieform').populate(m);
      });

      dojo.connect(moviesGrid, 'onCanDeselect', function() {
        console.log('CAN DESELECT movie: ', arguments);
        return true;
      });
    });
  </script>

</head>
<body class="tundra">

  <div dojoType="dijit.layout.BorderContainer" jsId="container" id="container" design="headline">
    <div dojoType="dijit.layout.ContentPane" region="top">
      <div class="headerWrapper">
        <h1>Movies</h1>
      </div>
    </div>
    <div dojoType="dijit.layout.ContentPane" region="center">
      <div id="movieslist"></div>
    </div>
    <div dojoType="dijit.layout.TabContainer" id="tabs" jsId="tabs" region="left"
         tabPosition="left" tabStrip="true" splitter="true" style="width:20em; height:100%">
      <div dojoType="dijit.layout.ContentPane" id="awardsPane" title="Awards">
        <div dojoType="dojo.data.ItemFileReadStore"
             url="/awards.json" jsId="awardsStore"></div>
        <div dojoType="dijit.tree.ForestStoreModel"
             store="awardsStore"
             rootLabel="Awards"
             childrenAttrs="awards"
             jsId="awardsModel"></div>
        <div dojoType="dijit.Tree" jsId="awardsTree" 
             model="awardsModel"
             showRoot="false">
        </div>
      </div>
      <div dojoType="dijit.layout.ContentPane" id="peoplePane" title="People">
        <div id="peoplelist"></div>
      </div>
    </div>
    <div dojoType="dijit.layout.ContentPane" region="bottom">
      <form dojoType="moviedb.MovieForm" id="movieform">
        <ul>
          <li>
            <label for="movie_title">Title:</label>
          </li>
          <li>
            <input type="text" dojoType="dijit.form.ValidationTextBox"
                   id="movie_title" name="movie[title]"
                   required="true" trim="true"
                   invalidMessage="Please enter the movie's title." />
          </li>
          <li>
            <label for="movie_release_date">Release Date:</label>
          </li>
          <li>
            <input type="text" dojoType="dijit.form.DateTextBox"
                   id="movie_release_date" name="movie[release_date]"
                   invalidMessage="Please enter a valid date." />
          </li>
            
      </form>
    </div>
  </div>
  
  <div dojoType="dojox.widget.Toaster" positionDirection="tr-down" messageTopic="toast"></div>
</body>
</html>
